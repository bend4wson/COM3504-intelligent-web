<%- include('header'); -%>
<link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css"/>
<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
<script src="https://unpkg.com/idb-keyval@6/dist/idb-keyval-iife-compat.min.js"></script>
<script src="/javascripts/onlineOffline.js"></script>


<div class="card col-11 col-md-6" style="margin: 100px auto;">
    <div class="card-body">
        <h1>Add your sighting below:</h1>

        <form id="sightingForm" action="/sightings/add_sighting" method="post" enctype="multipart/form-data">
            <div class="mb-3">
                <label class="form-label" for="type">Type:</label>
                <select class="form-control" name="type" id="type" required></select>
            </div>

            <div class="mb-3">
                <label class="form-label" for="description">Description:</label>
                <input class="form-control" type="text" name="description" id="description" required />
            </div>
            <div class="mb-3">
                <label class="form-label" for="lat">Latitude:</label>
                <input class="form-control" type="number" step="any" name="lat" id="lat" required />
            </div>
            <div class="mb-3">
                <label class="form-label" for="lng">Longitude:</label>
                <input class="form-control" type="number" step="any" name="lng" id="lng" required />
            </div>

            <div id="map" style="height: 400px; width: 100%;">
                <div id="loadingWidget">
                    <p>Loading map...</p>
                    <!-- *** Replace the paragraph above with a spinner when there is a chance, you can use Font Awesome or Bootstrap -->
                </div>
                <div id="offlineMessage" style="display: none;">
                    You are offline, the map is not available.
                </div>
            </div>

            <!-- Add a message for offline users -->
            <div id="offlineMessage" style="display: none;">
                You are currently offline. Geolocation is not possible.
            </div>

<!--                <label class="form-label" for="map">Choose Sighting Location:</label>-->
<!--            </div>-->
            <input class="form-control" type="hidden" name="userLat" id="userLat" required />
            <input class="form-control" type="hidden" name="userLng" id="userLng" required />
            <div class="mb-3">
                <label class="form-label" for="picture">Picture:</label>
                <input type="file" name="picture" id="picture" accept="image/*" />
            </div>

            <button type="submit">Add Sighting</button>
        </form>
    </div>
</div>
<script>
    // A global variable to store whether the data has been saved to IndexedDB
    let savedToIndexedDB = false;

    async function addSighting() {
        // Prevents form submission (when form is submitted any js after that point isn't run/is cut off)
        event.preventDefault();

        const form = document.getElementById('sightingForm');
        const formData = new FormData(form);

        if (navigator.onLine) {
            // User is online, submit the form as usual
            if (!savedToIndexedDB) {
                // Only submit the form if the data has not been saved to IndexedDB
                form.submit();
            }
        } else {
            // User is offline, save the form data in IndexedDB
            await saveFormDataInIndexedDB(formData);
            savedToIndexedDB = true;
        }
    }

    function getLocation() {
        console.log('Getting location...');
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(
                (position) => {
                    console.log('Position received:', position);
                    document.getElementById('userLat').value = position.coords.latitude;
                    document.getElementById('userLng').value = position.coords.longitude;
                    document.getElementById('lat').value = position.coords.latitude;
                    document.getElementById('lng').value = position.coords.longitude;
                    initMapWithDraggableMarker(position.coords.latitude, position.coords.longitude);  // Initialize the map
                },
                (error) => {
                    console.warn(`ERROR(${error.code}): ${error.message}`);
                    console.log('Error details:', error);
                    document.getElementById('offlineMessage').style.display = 'block'; // Show offline message
                },
                {
                    enableHighAccuracy: true,
                    timeout: 20000,
                    maximumAge: 0,
                }
            );
        } else {
            console.log('Geolocation is not supported by this browser.');
            document.getElementById('offlineMessage').style.display = 'block'; // Show offline message
        }
    }



    async function fetchBirdTypes() {
        const sparqlQuery = `
    PREFIX dbo: <http://dbpedia.org/ontology/>
    PREFIX dbr: <http://dbpedia.org/resource/>
    SELECT DISTINCT ?bird ?birdLabel
    WHERE {
        dbr:Bird dbo:wikiPageWikiLink ?bird .
        ?bird rdfs:label ?birdLabel .
        FILTER(lang(?birdLabel) = "en") .
    }
    LIMIT 1000
    `;
        const url = "https://dbpedia.org/sparql?query=" + encodeURIComponent(sparqlQuery) + "&format=json";

        try {
            const response = await fetch(url);
            const data = await response.json();
            return data.results.bindings;
        } catch (error) {
            console.error("Error fetching bird names:", error);
            return [];
        }
    }


    function populateBirdTypesDropdown(birdTypes) {
        // Sort the birdTypes array alphabetically by birdLabel value
        birdTypes.sort((a, b) => {
            if (a.birdLabel.value < b.birdLabel.value) return -1;
            if (a.birdLabel.value > b.birdLabel.value) return 1;
            return 0;
        });

        const dropdown = document.getElementById("type");

        // Create the "Unknown" option and set it as the default choice
        const unknownOption = document.createElement("option");
        unknownOption.value = "unknown";
        unknownOption.textContent = "Unknown";
        unknownOption.selected = true;
        dropdown.appendChild(unknownOption);

        birdTypes.forEach((birdType) => {
            const option = document.createElement("option");
            option.value = option.textContent = birdType.birdLabel.value;
            dropdown.appendChild(option);
        });
    }


    // Call getLocation when the page loads
    // window.addEventListener('DOMContentLoaded', getLocation);

    window.addEventListener('DOMContentLoaded', async () => {
        const birdTypes = await fetchBirdTypes();
        populateBirdTypesDropdown(birdTypes);
        getLocation();
        document.getElementById('sightingForm').addEventListener('submit', addSighting);
    });
</script>
<script>
    function formSubmission(){

    }
</script>


<%- include('footer'); -%>
